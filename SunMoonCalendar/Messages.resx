<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="msgAstronomicalTwilight" xml:space="preserve">
    <value>Astronomical twilight ({0:HH:mm} - {1:HH:mm})|As in astronomical twilight</value>
  </data>
  <data name="msgCaptionText" xml:space="preserve">
    <value>Sun and moon calendar [{0} / {1}, Location: {2}]|As in the main window's caption with current selected month and current location name</value>
  </data>
  <data name="msgCivilTwilight" xml:space="preserve">
    <value>Civil twilight ({0:HH:mm} - {1:HH:mm})|As in civil twilight</value>
  </data>
  <data name="msgCompassPointEastShort" xml:space="preserve">
    <value>E|As in a letter for the east compass point</value>
  </data>
  <data name="msgCompassPointNorthEastShort" xml:space="preserve">
    <value>NE|As in a letters for the north-east compass point</value>
  </data>
  <data name="msgCompassPointNorthShort" xml:space="preserve">
    <value>N|As in a letter for the north compass point</value>
  </data>
  <data name="msgCompassPointNorthWestShort" xml:space="preserve">
    <value>NW|As in a letters for the north-west compass point</value>
  </data>
  <data name="msgCompassPointSouthEastShort" xml:space="preserve">
    <value>SE|As in a letters for the south-east compass point</value>
  </data>
  <data name="msgCompassPointSouthShort" xml:space="preserve">
    <value>S|As in a letter for the south compass point</value>
  </data>
  <data name="msgCompassPointSouthWestShort" xml:space="preserve">
    <value>SW|As in a letters for the south-west compass point</value>
  </data>
  <data name="msgCompassPointWestShort" xml:space="preserve">
    <value>W|As in a letter for the west compass point</value>
  </data>
  <data name="msgMoonFirstQuarter" xml:space="preserve">
    <value>First Quarter|As in first quarter (moon)</value>
  </data>
  <data name="msgMoonFullMoon" xml:space="preserve">
    <value>Full Moon|As in full moon</value>
  </data>
  <data name="msgMoonLastQuarter" xml:space="preserve">
    <value>Last Quarter|As in last quarter (moon)</value>
  </data>
  <data name="msgMoonNewMoon" xml:space="preserve">
    <value>New moon|As in new moon</value>
  </data>
  <data name="msgMoonWaningCrescent" xml:space="preserve">
    <value>Waning Crescent|As in waning crescent (moon)</value>
  </data>
  <data name="msgMoonWaningGibbous" xml:space="preserve">
    <value>Waning Gibbous|As in waning gibbous (moon)</value>
  </data>
  <data name="msgMoonWaxingCrescent" xml:space="preserve">
    <value>Waxing Crescent|As in waxing crescent (moon)</value>
  </data>
  <data name="msgMoonWaxingGibbous" xml:space="preserve">
    <value>Waxing Gibbous|As in waxing gibbous (moon)</value>
  </data>
  <data name="msgNauticalTwilight" xml:space="preserve">
    <value>Nautical twilight ({0:HH:mm} - {1:HH:mm})|As in nautical twilight</value>
  </data>
  <data name="msgObjectNoRise" xml:space="preserve">
    <value>does not rise|as in the sun/moon doesn't rise</value>
  </data>
  <data name="msgObjectNoSet" xml:space="preserve">
    <value>does not set|as in the sun/moon doesn't set</value>
  </data>
  <data name="msgSunInfoShort" xml:space="preserve">
    <value>N: {0}{1}A: {2:F2}°{3}L: {4}:{5} h|N as in Noon and A as in angle and L as in day length, h as in hours</value>
  </data>
  <data name="msgTwilightDay" xml:space="preserve">
    <value>Day ({0:HH:mm} - {1:HH:mm})|Day as in not actually a twilight</value>
  </data>
  <data name="msgTwilightNight" xml:space="preserve">
    <value>Night ({0:HH:mm} - {1:HH:mm})|Night as in not actually a twilight</value>
  </data>
  <data name="msgTwilightNone" xml:space="preserve">
    <value>None|None as in not actually a twilight</value>
  </data>
  <data name="msgUTCMoon" xml:space="preserve">
    <value>Time, Moon (UTC {0} {1:F0})|A text describing a local time with UTC offset of the moon</value>
  </data>
  <data name="msgUTCSun" xml:space="preserve">
    <value>Time, Sun (UTC {0} {1:F0})|A text describing a local time with UTC offset of the sun</value>
  </data>
</root>